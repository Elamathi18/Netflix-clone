{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ELAMATHI\\\\Desktop\\\\Netflix\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nconst base_url = \"http://image.tmdb.org/t/p/original\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); // A snippet of code which runs on a specific condition\n\n  useEffect(() => {\n    //if [],run once when the row loads and dont run again.\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        //https://www.youtube.com/watch?v=XtMThy8QKqU\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  }; //console.table(movies);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 22\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"L1ywPNv5QsX47ZoMAyL8l4aBE/I=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/ELAMATHI/Desktop/Netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAC,oCAAf;;AACA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAb,EAA0C;AAAA;;AACtC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBX,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACY,UAAD,EAAYC,aAAZ,IAA2Bb,QAAQ,CAAC,EAAD,CAAzC,CAFsC,CAItC;;AACAC,EAAAA,SAAS,CAAC,MAAK;AACX;AACA,mBAAea,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAE,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAArB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GATQ,EASL,CAACN,QAAD,CATK,CAAT;AAWA,QAAMW,IAAI,GAAC;AACPC,IAAAA,MAAM,EAAC,KADA;AAEPC,IAAAA,KAAK,EAAC,MAFC;AAGPC,IAAAA,UAAU,EAAC;AACP;AACAC,MAAAA,QAAQ,EAAC;AAFF;AAHJ,GAAX;;AASA,QAAMC,WAAW,GAAEC,KAAD,IAAS;AACvB,QAAGb,UAAH,EAAc;AACZC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAGI;AACAT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAc,EAAf,CAAZ,CACCC,IADD,CACMC,GAAG,IAAE;AACP;AACA,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OALD,EAMCiB,KAND,CAMQC,KAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANhB;AAOH;AACJ,GAbD,CAzBsC,CAwCvC;;;AACC,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAA,gBAAK3B;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAEMG,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBACb;AAEA,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAFxB;AAGA,QAAA,SAAS,EAAG,cAAchB,UAAU,IAAI,iBAAmB,EAH3D;AAIA,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGgB,KAAK,CAACa,WAAT,GAAuBb,KAAK,CAACc,aAAc,EAJxE;AAKA,QAAA,GAAG,EAAEd,KAAK,CAACC;AALX,SACKD,KAAK,CAACe,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AAFN;AAAA;AAAA;AAAA;AAAA,YAHJ,EAcI5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAGO;AAArC;AAAA;AAAA;AAAA;AAAA,YAdlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GA5DQb,G;;KAAAA,G;AA8DT,eAAeA,GAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n \r\nconst base_url=\"http://image.tmdb.org/t/p/original\";\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies,setMovies]=useState([]);\r\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\r\n\r\n    // A snippet of code which runs on a specific condition\r\n    useEffect(()=> {\r\n        //if [],run once when the row loads and dont run again.\r\n        async function fetchData() {\r\n            const request =await axios.get(fetchUrl);\r\n            //console.log(request);\r\n            setMovies(request.data.results) \r\n            return request;\r\n        }\r\n        fetchData();\r\n    },  [fetchUrl]);\r\n\r\n    const opts={\r\n        height:\"390\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            //https://developers.google.com/youtube/player_parameters\r\n            autoplay:1,\r\n        },\r\n    };\r\n\r\n    const handleClick=(movie)=>{\r\n        if(trailerUrl){\r\n          setTrailerUrl('');  \r\n        }\r\n        else{\r\n            movieTrailer(movie?.name|| \"\")\r\n            .then(url=>{\r\n                //https://www.youtube.com/watch?v=XtMThy8QKqU\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get(\"v\"))\r\n            })\r\n            .catch((error)=>console.log(error));\r\n        }\r\n    }\r\n\r\n   //console.table(movies);\r\n    return (\r\n        <div className=\"row\">\r\n            {/*title*/}\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                 {/*container->poster*/}\r\n                 {movies.map(movie =>(\r\n                     <img \r\n                     key={movie.id}\r\n                     onClick={()=>handleClick(movie)}\r\n                     className={`row_poster ${ isLargeRow && \"row_posterLarge\" }`}\r\n                     src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                     alt={movie.name}/>\r\n                 ))}\r\n            </div>\r\n           {trailerUrl && <Youtube videoId={trailerUrl} opts= {opts}/>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}