{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ELAMATHI\\\\Desktop\\\\Netflix\\\\netflix-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nconst base_url = \"http://image.tmdb.org/t/p/original\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]); // A snippet of code which runs on a specific condition\n\n  useEffect(() => {\n    //if [],run once when the row loads and dont run again.\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.table(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        /*key={movie.id}*/\n        className: \"row_poster\",\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.poster_path}`,\n        alt: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 22\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"+jZiGaK1IrFkDFSplSYv9W7La4s=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/ELAMATHI/Desktop/Netflix/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","console","table","map","movie","poster_path","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AAEA,MAAMC,QAAQ,GAAC,oCAAf;;AACA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAb,EAA0C;AAAA;;AACtC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBT,QAAQ,CAAC,EAAD,CAAjC,CADsC,CAGtC;;AACAC,EAAAA,SAAS,CAAC,MAAK;AACX;AACA,mBAAeS,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAE,MAAMT,KAAK,CAACU,GAAN,CAAUN,QAAV,CAArB,CADuB,CAEvB;;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GATQ,EASL,CAACJ,QAAD,CATK,CAAT;AAWAS,EAAAA,OAAO,CAACC,KAAR,CAAcR,MAAd;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAEMG,MAAM,CAACS,GAAP,CAAWC,KAAK,iBACb;AACA;AACA,QAAA,SAAS,EAAC,YAFV;AAGA,QAAA,GAAG,EAAG,GAAEf,QAAS,GAAEI,UAAU,GAAGW,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACC,WAAY,EAHtE;AAIA,QAAA,GAAG,EAAED,KAAK,CAACE;AAJX;AAAA;AAAA;AAAA;AAAA,cADH;AAFN;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GAjCQhB,G;;KAAAA,G;AAmCT,eAAeA,GAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n \r\nconst base_url=\"http://image.tmdb.org/t/p/original\";\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies,setMovies]=useState([]);\r\n\r\n    // A snippet of code which runs on a specific condition\r\n    useEffect(()=> {\r\n        //if [],run once when the row loads and dont run again.\r\n        async function fetchData() {\r\n            const request =await axios.get(fetchUrl);\r\n            //console.log(request);\r\n            setMovies(request.data.results) \r\n            return request;\r\n        }\r\n        fetchData();\r\n    },  [fetchUrl]);\r\n\r\n    console.table(movies);\r\n    return (\r\n        <div className=\"row\">\r\n            {/*title*/}\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                 {/*container->poster*/}\r\n                 {movies.map(movie =>(\r\n                     <img \r\n                     /*key={movie.id}*/\r\n                     className=\"row_poster\"\r\n                     src={`${base_url}${isLargeRow ? movie.poster_path : movie.poster_path}`} \r\n                     alt={movie.name}/>\r\n                 ))}\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}